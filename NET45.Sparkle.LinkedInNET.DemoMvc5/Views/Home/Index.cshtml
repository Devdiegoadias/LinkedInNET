@{
    ViewBag.Title = "Index";
    var configuration = (Sparkle.LinkedInNET.LinkedInApiConfiguration)this.ViewBag.Configuration ?? new Sparkle.LinkedInNET.LinkedInApiConfiguration();
    var configIsValid = !string.IsNullOrEmpty(configuration.ApiKey) && !string.IsNullOrEmpty(configuration.ApiSecretKey);
    var jsonSettings = new Newtonsoft.Json.JsonSerializerSettings
    {
        NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
    };
}

<style type="text/css">
    .ok
    {
        color:#00b017;
    }
    .error
    {
        color:#f00;
    }
    a.button
    {
        display: inline-block;
        border:1px solid gray;
        background: #e8e8e8;
        border-radius: 2px;
        padding: 5px;
    }
</style>

<h2>1. Configure this app @(configIsValid ? "(ok)" : "(todo)")</h2>
<p>Your Web.config contains 2 appSettings entries to fill with your API keys.</p>
<pre>  &lt;appSettings&gt;
    <span class="@(string.IsNullOrEmpty(configuration.ApiKey) ? "error" : "ok")">&lt;add key="MyDemo.LinkedInConnect.ApiKey" value="@configuration.ApiKey" /&gt;</span>
    <span class="@(string.IsNullOrEmpty(configuration.ApiSecretKey) ? "error" : "ok")">&lt;add key="MyDemo.LinkedInConnect.ApiSecretKey" value="@(new string(configuration.ApiSecretKey.Select(c => '•').ToArray()))" /&gt;</span>
  &lt;/appSettings&gt;</pre>

<h2>2. Authorize user @(this.ViewBag.Url != null ? "(ok)" : "")</h2>
<p>The user will navigate to LinkedIn to authorize your app.</p>
@if (this.ViewBag.Url != null){
<p><a href="@this.ViewBag.Url" class="button">Authorize now</a></p>
<pre>@Html.Raw(((Uri)this.ViewBag.Url).OriginalString.Replace(configuration.ApiKey, "<span class=\"ok\">" + configuration.ApiKey + "</span>"))</pre>
<p>After authorization, the user will come back to:</p>
<pre>@this.ViewBag.LocalRedirectUrl</pre>
}else{
    <p class="error">You have to configure this app (step 1.)</p>
}
<h2>3. Store token @(this.ViewBag.Token != null ? "(ok)" : "(todo)")</h2>
<pre>@this.ViewBag.Token</pre>
@if (this.ViewBag.ProfileDuration != null)
{
<p>API call duration: @this.ViewBag.ProfileDuration</p>
}
@if (this.ViewBag.Token != null)
{
    <p>@Html.ActionLink("Log off", "LogOff", null, new { @class="button", })</p>
}

<h2>4. Make API calls</h2>
<p>Here is the user's profile.</p>
@{
    var profile = (Sparkle.LinkedInNET.Profiles.Person)this.ViewBag.Profile;
}
@if (profile != null)
{
<dl>
    <dt>Firstname</dt>
    <dd>@profile.Firstname</dd>
    <dt>Lastname</dt>
    <dd>@profile.Lastname</dd>
    <dt>Headline</dt>
    <dd>@profile.Headline</dd>
</dl>
    <pre>@Newtonsoft.Json.JsonConvert.SerializeObject(profile, Newtonsoft.Json.Formatting.Indented, jsonSettings)</pre>
}
@if (this.ViewBag.ProfileError != null)
{
<pre>@this.ViewBag.ProfileError</pre>
}
<p>Here is the original profile picture.</p>
@{
    var pictureUrls = (Sparkle.LinkedInNET.Profiles.PictureUrls)this.ViewBag.Picture;
}
@if (pictureUrls != null && pictureUrls.PictureUrl != null)
{
<p>
    @foreach (var picture in pictureUrls.PictureUrl) {
    <img src="@picture" alt="@picture" title="@picture" />
    }
</p>
<pre>@Newtonsoft.Json.JsonConvert.SerializeObject(pictureUrls, Newtonsoft.Json.Formatting.Indented, jsonSettings)</pre>
} else {
<pre></pre>
}
<p>Here are the companies profiles.</p>
@{
    var companies = (IList<Sparkle.LinkedInNET.Companies.Company>)this.ViewBag.Companies;
}
@if (companies != null)
{
    foreach (var company in companies)
    {
        <h5>@company.Name</h5>
        <pre>@Newtonsoft.Json.JsonConvert.SerializeObject(company, Newtonsoft.Json.Formatting.Indented)</pre>
    }
}
@if (this.ViewBag.CompaniesError != null)
{
<pre>@this.ViewBag.CompaniesError</pre>
}
<h2>5. Explore API</h2>
<p>@Html.ActionLink("Start", "Index", "Explore", null, new { @class = "button", })</p>