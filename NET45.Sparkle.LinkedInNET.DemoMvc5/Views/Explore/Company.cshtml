@model Sparkle.LinkedInNET.Companies.Company
@{
    int id = this.ViewBag.Id;
    Exception error = this.ViewBag.Error;
}

<style>
    .pagination{
        display:block;
    }
    .pagination > a {
        display:inline-block;
        padding:0px 10px;
        border:1px solid gray;
        background-color:lightgray;
        line-height:10px;
    }
    .pagination > a.active {
        display:inline-block;
        border:1px solid #384dd6;
        background-color:#d2ddff;
    }
</style>

<h1>@Html.ActionLink("Explore", "Index") - @Html.ActionLink("Company " + Model.Name, "Company", new { id = Model.Id, })</h1>

<h2>@Model.Name</h2>

@if (error != null)
{
    <pre style="color:red;">@error.ToString()</pre>
}

<dl class="srkdl">
    <dt>Id</dt>
    <dd>@Model.Id</dd>

    <dt>UniversalName</dt>
    <dd>@Model.UniversalName</dd>

    <dt>EmailDomains</dt>
    <dd>
@if (Model.EmailDomains != null && Model.EmailDomains.EmailDomain != null)
{
    @:@string.Join(", ", Model.EmailDomains.EmailDomain)
}
    </dd>

    <dt>Ticker</dt>
    <dd>@Model.Ticker</dd>

    <dt>Id</dt>
    <dd>@Model.Id</dd>

    <dt>LinkedIn URL</dt>
    <dd>@Html.DisplayUrl("https://www.linkedin.com/company/" + Model.Id)</dd>

    <dt>WebsiteUrl</dt>
    <dd>@(Model.WebsiteUrl != null ? Html.DisplayUrl(Model.WebsiteUrl) : null)</dd>

    <dt>Status</dt>
    <dd>
@if (Model.Status != null)
{
    @:@Model.Status.Name
}
else
{
    @: ???
}
    </dd>

    <dt>Logo</dt>
    <dd>@if (Model.LogoUrl != null){ <img src="@Model.LogoUrl" alt="Logo of @Model.Name" /> }</dd>

@if (Model.Locations != null && Model.Locations.Location != null)
{
    foreach (var location in Model.Locations.Location){
    <dt>Location</dt>
    <dd><ul>
        <li>@(location.Description != null ? location.Description : "no description")</li>
        <li>@(location.IsHeadquarters ? "is headquarter" : "other location"), 
            @(location.IsActive ? "active location" : "inactive location")</li>
        @if (location.Address != null){
        <li>
            Location
            <ul>
                <li>@location.Address.Street1</li>
                <li>@location.Address.Street2</li>
                <li>@location.Address.PostalCode @location.Address.City</li>
                <li>@location.Address.CountryCode</li>
            </ul>
        </li>
        }
        @if (location.ContactInfo != null){
        <li>
            Contact
            <ul>
                <li>Phone1: @location.ContactInfo.Phone1</li>
                <li>Phone2: @location.ContactInfo.Phone2</li>
                <li>Fax: @location.ContactInfo.Fax</li>
            </ul>
        </li>
        }
    </ul></dd>
    }
}

    <dt>Description</dt>
    <dd><pre>@Model.Description</pre></dd>

    <dt>FoundedYear</dt>
    <dd>@Model.FoundedYear</dd>

    <dt>EndYear</dt>
    <dd>@Model.EndYear</dd>

    <dt>NumFollowers</dt>
    <dd>@Model.NumFollowers</dd>

    <dt>JSON</dt>
    <dd>
        <p><code>@Model.GetType().ToString()</code></p>
        <pre>@Newtonsoft.Json.JsonConvert.SerializeObject(Model, Newtonsoft.Json.Formatting.Indented)</pre>
    </dd>
</dl>

<h2 class="clear" id="Shares">Shares</h2>
@{
    var shares = (Sparkle.LinkedInNET.Companies.CompanyUpdates)this.ViewBag.Shares;
    var sharesTotal = this.ViewBag.SharesTotal != null ? (int)this.ViewBag.SharesTotal : 0;
    var sharesCount = (int)this.ViewBag.SharesCount;
    var sharesStart = (int)this.ViewBag.SharesStart;
    var sharePages = (int)Math.Ceiling((double)sharesTotal / (double)sharesCount);
    string eventType = this.ViewBag.EventType;
    var eventTypes = new List<string> { "job-posting", "new-product", "status-update", };
    if (!string.IsNullOrEmpty(eventType) && !eventTypes.Contains(eventType)) { eventTypes.Add(eventType); }
}
<p>
    @Html.ActionLink("New share...", "CompanyShare", new { CompanyId = Model.Id, })
</p>
<p class="pagination">Filter by: 
    <a href="@Url.Action("Company", new { id = id, count = sharesCount, start = 0, eventType = "", })#Shares" class="@(string.IsNullOrEmpty(eventType) ? "active" : "")">all</a>
@foreach (var eventTypeValue in eventTypes)
{
    @: <a href="@Url.Action("Company", new { id = id, count = sharesCount, start = 0, eventType = eventTypeValue, })#Shares" class="@(eventType == eventTypeValue ? "active" : "")">@eventTypeValue</a>
}
</p>
<p class="pagination">
@for (int i = 0; i < sharePages; i++)
{
    var offset = i * sharesCount;
    <a href="@Url.Action("Company", new { id = id, count = sharesCount, start = offset, eventType = eventType, })#Shares" class="@(sharesStart == offset ? "active" : "")">P-@i</a>
}
</p>
@if (shares != null && shares.Update != null && shares.Update.Count > 0)
{
<dl>
    @foreach (var share in shares.Update)
    {
    <dt class="clear">
    @share.Timestamp.FromUnixTime()
    </dt>
    if (share.UpdateContent != null && share.UpdateContent.CompanyStatusUpdate != null && share.UpdateContent.CompanyStatusUpdate.Share != null && share.UpdateContent.CompanyStatusUpdate.Share.Comment != null)
    {
        string[] lines = new string[] { share.UpdateContent.CompanyStatusUpdate.Share.Comment, };
        if (lines[0].Contains("\r\n"))
        {
            lines = lines[0].Split(new string[] { "\r\n", }, StringSplitOptions.None);
        }
        else if (lines[0].Contains("\n"))
        {
            lines = lines[0].Split('\n');
        }
        string sep = "";
    <dd><blockquote><p>@foreach (var line in lines)
        {
            @:@Html.Raw(sep)@line
            sep = "<br />";
        }</p></blockquote></dd>
    }
    <dd>
        @if (share.UpdateContent != null)
        {
            var content = share.UpdateContent;
            
            if (content.CompanyJobUpdate != null)
            {
                if (content.CompanyJobUpdate.Job != null)
                {
                    var job = content.CompanyJobUpdate.Job;
        <p>@job.Id</p>
        string[] lines = new string[] { job.Description, };
        if (lines[0].Contains("\r\n"))
        {
            lines = lines[0].Split(new string[] { "\r\n", }, StringSplitOptions.None);
        }
        else if (lines[0].Contains("\n"))
        {
            lines = lines[0].Split('\n');
        }
        string sep = "";
        <blockquote><p>@foreach (var line in lines)
        {
            @:@Html.Raw(sep)@line
            sep = "<br />";
        }</p></blockquote>
        <p>Location:@job.Location</p>
                    if (job.Position != null) {
        <p>@job.Position.Title</p>
                    }
                    if (job.Url != null) {
        <p>@job.Url.Url</p>
                    }
                } else {
        <p>Job update: no job.</p>
                }
            } else if (content.CompanyProductUpdate != null) {
        <p>CompanyProductUpdate</p>
            } else if (content.CompanyStatusUpdate != null) {
                if (content.CompanyStatusUpdate.Share != null) {
                    var update = content.CompanyStatusUpdate.Share;
                    if (update.Content != null)
                    {
                        if (update.Content.SubmittedImageUrl != null || update.Content.ThumbnailUrl != null)
                        {
        <div style="float:left; max-width:250px; padding:  0.3em 1em .5em 0em;"><img src="@(update.Content.ThumbnailUrl)" /></div>
                        }
        <p>@(update.Content.Title != null ? update.Content.Title : "no title")</p>
        <p>@(update.Content.Description != null ? update.Content.Description : "no description")</p>
        <p>@(update.Content.SubmittedUrl != null ? update.Content.SubmittedUrl : "no SubmittedUrl")</p>
                    }
        <pre>@Newtonsoft.Json.JsonConvert.SerializeObject(update, Newtonsoft.Json.Formatting.Indented)</pre>
        <p>@Html.ActionLink("re-share as company", "CompanyShare", new { ShareId = update.Id, })</p>
                } else {
        <p>empty?</p>
                }
            } else {
        <p>No content: UpdateContent does not contain anything known.</p>
            }
        }else{
        <p>No content: UpdateContent is null.</p>
        }
    </dd>
    }
</dl>
<p class="pagination">
@for (int i = 0; i < sharePages; i++)
{
    var offset = i * sharesCount;
    <a href="@Url.Action("Company", new { id = id, count = sharesCount, start = offset, eventType = eventType, })#Shares" class="@(sharesStart == offset ? "active" : "")">P-@i</a>
}
</p>
}
else
{
<p>No shares.</p>
}


